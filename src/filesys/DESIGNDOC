       	       	     +-------------------------+
		     |		CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Sambasevam Shanmugam sambasevam@gmail.com

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Please note that the directory code is not complete. 

First of all, thank you for the extension. I still didn't have enough time 
to complete the project though. I got stuck on a few bugs
and spent too much time on them. However, I am satisfied about my design
and understanding of file extension, growth and buffer cache. 
I wish that I had skipped thanksgiving because I would have been able to 
complete it. 

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

I referred online a couple simple macros such as for debug on/off, min/max. 
In addition, I referred to these resources for a better understanding of file 
systems :
http://www.tldp.org/LDP/tlk/fs/filesystem.html
http://www.eng.utah.edu/~cs5460/slides/Lecture18.pdf

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* On-disk inode.
   Must be exactly BLOCK_SECTOR_SIZE bytes long. */
struct inode_disk
  {
    block_sector_t start;               /* UNUSED First data sector. */

    block_sector_t blocks[DIRECT_BLOCKS];/* For files <5 kB */
    off_t length;                       /* File size in bytes. */
    block_sector_t self;                /* Block in which this inode is stored.
                                           Same as sector in struct inode*/
    block_sector_t indirect;            /* Block where inode_indirect struct is stored */
    block_sector_t dbl_indirect;        /* Block where inode_dbl_indirect struct is stored */
    unsigned indirect_used;             /* Indicates if indirect used */
    unsigned dbl_indirect_used ;        /* Indicates if dbl_indirect is used */
    unsigned magic;                     /* Magic number. */
    uint32_t unused[110];               /* Not used. */
  };

/* On-disk indirect block - Each indirect block contains an array of 125
   blocks each of which can hold BLOCK_SECTOR_SIZE bytes of data for a total
   of 125 * BLOCK_SECTOR_SIZE bytes of data */
struct inode_indirect
  {
    block_sector_t sector;              /* sector containing this data structure */
    block_sector_t parent;              /* The inode_disk to which this belongs */
    off_t length;                       /* # of data blocks used */
    block_sector_t blocks[INDIRECT_BLOCKS];
  };

/* On-disk double indirect block - Each dbl_indirect block can hold an array
   of 125 blocks each of which can hold 125 indirect blocks */
struct inode_dbl_indirect
  {
    block_sector_t sector;
    block_sector_t parent;              /* The inode_disk to which this belongs */
    off_t length;                       /* # of indirect blocks used */
    block_sector_t indirect[INDIRECT_BLOCKS];
  };
/* In-memory inode. */
struct inode
  {
    struct list_elem elem;              /* Element in inode list. */
    block_sector_t sector;              /* Sector number of disk location. */
    int open_cnt;                       /* Number of openers. */
    bool removed;                       /* True if deleted, false otherwise. */
    int deny_write_cnt;                 /* 0: writes ok, >0: deny writes. */
    struct inode_disk data;             /* Inode content. */

    off_t length;
    struct inode_indirect ind_data;     /* Each indirect block holds 128 block #s */
    struct inode_dbl_indirect dbl_indirect;
                                        /* One dbly indirect block can address 16384 blocks */
  };


inode_disk is the actual block stored in the disk. Its key elements are blocks[],
 indirect, dbl_indirect. blocks[] are the direct blocks for files of less than 
5kB (10*512 bytes). indirect and dbl_indirect are where the two corresponding 
structs reside in disk.  

inode_indirect is an on-disk struct which has 125 data block sectors. 
inode_dbl_indirect has 125 blocks each of which hold an inode_indirect struct.

struct inode is a container for the on-disk inode structures. For example, 
to read an indirect sector,I first get the on-disk inode, read the indirect 
block into ind_data and access its blocks[].

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

#define DIRECT_BLOCKS 10
#define INDIRECT_BLOCKS 125
#define DBL_INDIRECT_BLOCKS 125
#define TOTAL_BLOCKS 15760
#define MAX_FILE_SIZE 8069120           /* Appx. 8 MB */

10 direct blocks + 125 indirect blocks + 125 * 125 double indirect 
blocks for a total of 15760 data blocks.
15760 * 512B = 8069120 bytes which is 7.69 MB.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.
Currently it doesn't. If it were to, whichever processor ran first, 
would extend the file and the next one wouldn't be seeing as the check
for file extension (acccess > file_size) would fail if proc 1 succeeded.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

Yes. I chose the combination of direct/indirect/doubly-indirect blocks
to allow for creating files of upto 8 MB in size. The advantage of the
multi-level index is that it was easy for me to understand it. The
disadvantage is that it was tricky to extend a file due to the 
calculation necessary to allocate blocks of each category.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?
I use a helper function called resolve_dir that uses strtok_r to 
seperate the "/"s. First, I check if there is a "/" or "." anywhere.
If there isn't, I return. Else, I do a dir lookup of the token 
from strtok_r.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.
I'll have a lock per file/directory a process should acquire before 
modifying it.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
In filesys/cache.c
struct cache_entry
{
   struct hash_elem hash_elem; /* Each cache_entry is an element in the buffer_cache hash table */
   struct list_elem list_elem; /* Member in lru list */
   block_sector_t sector;      /* The key is block_sector_t and the data returned is data */
   void * data;                /* Actual data read from the block */
   bool accessed;              /* Unused */
   bool dirty;                 /* Indicates if this entry was modified */
};

struct hash buffer_cache;	
struct list lru; 


---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

Every cache entry is part of the buffer cache hash table and the lru list.
On every cache access, I update the lru list. The item accessed/inserted 
is at the top of the list. Existing items are re-ordered to the top when accessed. 
The least recently used item is the last element. When cache is full, I evict 
the LRU element which if dirty, gets written to disk. If it isn't dirty,
 the item is removed from the list. 

>> C3: Describe your implementation of write-behind.

Writes are done on the cache and the dirty bit is set on the write. 
When the dirty item is chosen for eviction, it is written to disk. 
If an item is not dirty, it is not written.
In addition, on every cache access, I update the timer. If time>=30 seconds, 
I flush the cache, and reset the timer.

>> C4: Describe your implementation of read-ahead.

What I would have done is, on every read access, compute the next block sector 
in that file. Then create a new thread whose function is read that block.
I didn't do this however.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

Currently I don't precent that from happening. However, I think the 
best way to do that would be to have a ref_count which tracks how
many processes are using that block, and only if it is 0 should 
you evict it.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

They aren't as of now. I'll have an 'evict' bit per block. Everytime
a process tries accessing it, if it sees the evict bit set, it won't
read that block.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

Repetitive reading/writing of a small subset of data within a file will
benefit from caching. Read ahead will be useful in an app like packet 
analyzer which will do seq. access to get the next packet from disk/io.
Write-behind will be useful for the same reason as caching - for small
subsets of data within the cache size.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

It was easier than the rest to understand what to do. 

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Absolutely. I now understand how files are stored/accessed. The whole inode 
concept was a mystery to me before this assignment and now it is very clear.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?
More hangout hours/group hours.

>> Any other comments?
I'm disappointed that after all the work I've put in this class,
this assignment is throwing it away. On the plus side, I've learned
a lot about OS and how things work.  


